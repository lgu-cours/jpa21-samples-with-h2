/*
 * Created on 21 janv. 2015 ( Time 17:25:52 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.demo.basics.entities;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.FieldResult;
import javax.persistence.Id;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;

import org.demo.basics.dto.PersonDTO;

/**
 * Persistent class for entity stored in table "PERSON"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="PERSON" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="PersonEntity.countAll", query="SELECT COUNT(x) FROM PersonEntity x" )
} )
@NamedNativeQueries ( {
	@NamedNativeQuery ( name="Person.minId", 
			query="SELECT MIN(ID) FROM PERSON" ),
	 
	@NamedNativeQuery ( name="Person.maxId", 
			query="SELECT MAX(ID) FROM PERSON" ),
					
	@NamedNativeQuery ( name="Person.selection", 
			query="SELECT * FROM PERSON WHERE ID >= :min AND ID <= :max",
			resultClass=PersonEntity.class )
})

@SqlResultSetMappings ( {

@SqlResultSetMapping (
	name = "PersonMapping",
	entities = {
			@EntityResult(entityClass = PersonEntity.class, 
			fields = {
				@FieldResult(name = "id", column = "ID"), 
				@FieldResult(name = "firstName", column = "FIRST_NAME"), 
				@FieldResult(name = "lastName", column = "LAST_NAME") 
			} )
	}
),

@SqlResultSetMapping ( // Mapping on a DTO (POJO)
		name = "IdAndNameMapping",
			classes = @ConstructorResult(
				targetClass = PersonDTO.class,
				// The PersonDTO constructor will be called with the following arguments 
				columns = {       
					@ColumnResult(name = "ID",        type=Integer.class), // First argument 
					@ColumnResult(name = "FIRST_NAME" ) // Second argument
				}
			)
	)
} )

public class PersonEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="ID", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="FIRST_NAME", length=40 )
    private String     firstName    ;

    @Column(name="LAST_NAME", length=40 )
    private String     lastName     ;

    @Column(name="LAST_NAME", length=40, insertable=false, updatable=false) // Read-only field
    private String     lastName2     ;



    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public PersonEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : FIRST_NAME ( VARCHAR ) 
    public void setFirstName( String firstName ) {
        this.firstName = firstName;
    }
    public String getFirstName() {
        return this.firstName;
    }

    //--- DATABASE MAPPING : LAST_NAME ( VARCHAR ) 
    public void setLastName( String lastName ) {
        this.lastName = lastName;
    }
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName2( String lastName ) {
        this.lastName2 = lastName;
    }
    public String getLastName2() {
        return this.lastName2;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(firstName);
        sb.append("|");
        sb.append(lastName);
        sb.append("|");
        sb.append(lastName2);
        return sb.toString(); 
    } 

}
