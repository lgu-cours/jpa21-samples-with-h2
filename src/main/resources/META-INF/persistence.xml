<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
  version="2.1">
  
	<persistence-unit name="myunit" transaction-type="RESOURCE_LOCAL">
	
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		
		<!-- Entity Classes -->
		<!-- Not required for Hibernate 
		<class>xxxx</class>
		<class>yyyy</class>
		-->
		
		<!-- Database Properties -->
		<properties>
		
			<!-- POSTGRESQL database -->
			<!-- 
			<property name="hibernate.dialect"                value="org.hibernate.dialect.PostgreSQLDialect" />
			<property name="javax.persistence.jdbc.driver"    value="org.postgresql.Driver" />
			<property name="javax.persistence.jdbc.url"       value="jdbc:postgresql://localhost:5432/DB_NAME" />
			<property name="javax.persistence.jdbc.user"      value="xxx" />
			<property name="javax.persistence.jdbc.password"  value="xxx" />
			 -->
	      
			<!-- DERBY database -->
			<!-- 
			<property name="hibernate.dialect"                value="org.hibernate.dialect.DerbyDialect" />
			<property name="javax.persistence.jdbc.driver"    value="org.apache.derby.jdbc.ClientDriver"/> 
	 		<property name="javax.persistence.jdbc.url"       value="jdbc:derby://localhost:1527/bookstore" /> 
			<property name="javax.persistence.jdbc.user"      value="root" /> 
			<property name="javax.persistence.jdbc.password"  value="admin" /> 
			 -->
			
			<!-- H2 database ( Embedded / In Memory )-->
			<property name="hibernate.dialect"                value="org.hibernate.dialect.H2Dialect" />
			<property name="javax.persistence.jdbc.driver"    value="org.h2.Driver"/>
<!-- 		
			<property name="javax.persistence.jdbc.url"       value="jdbc:h2:./db/repository"/>
			<property name="javax.persistence.jdbc.url"       value="jdbc:h2:file:./data/database/resource-manager" />
 -->
 			<property name="javax.persistence.jdbc.url"       value="jdbc:h2:mem:mydb" />
			<property name="javax.persistence.jdbc.user"      value="sa" /> 
			<property name="javax.persistence.jdbc.password"  value="" /> 


			<!-- HIBERNATE CONFIGURATION -->
			<property name="hibernate.show_sql"        value="true" />
			<property name="hibernate.format_sql"      value="true" />
			
			<!-- 
			"hibernate.hbm2ddl.auto"
			To automatically validate or export schema DDL to the database when the SessionFactory is created
			   - validate:    validate the schema, makes no changes to the database.
			   - update:      update the schema.
			   - create:      creates the schema, destroying previous data.
			   - create-drop: drop the schema at the end of the session.
			 -->
			<!-- 
			<property name="hibernate.hbm2ddl.auto"    value="validate" />
			<property name="hibernate.hbm2ddl.auto"    value="update" />
			<property name="hibernate.hbm2ddl.auto"    value="create"/>
			<property name="hibernate.hbm2ddl.auto"    value="create-drop"/>
			 -->
			 
			<!-- Database schema creation ( New in JPA 2.1 ) -->
			<!-- database.action : "none", "create", "drop-and-create", "drop". -->
			<property name="javax.persistence.schema-generation.database.action"       value="drop-and-create"/>
			<!-- 
			 -->
			<!-- 
			<property name="javax.persistence.schema-generation.drop-source"   value="drop_schema.sql"/>
			<property name="javax.persistence.schema-generation.create-source" value="create_schema.sql"/>
			<property name="javax.persistence.sql-load-script-source" value="insert.sql"/>
			 -->

			<!-- DDL scripts generation ( New in JPA 2.1 ) -->
			<!-- Scripts generated by "Persistence.createEntityManagerFactory()" or "Persistence.generateSchema()"  -->
			<!-- scripts.action : "none", "create", "drop-and-create", "drop". -->
			<!-- 
			<property name="javax.persistence.schema-generation.scripts.action"        value="drop-and-create"/>			
			<property name="javax.persistence.schema-generation.scripts.create-target" value="sql/create_tables.sql"/>
			<property name="javax.persistence.schema-generation.scripts.drop-target"   value="sql/drop_tables.sql"/>
			 -->

			<property name="hibernate.max_fetch_depth" value="3" />
			
			<!-- Configuring Connection Pool -->
			<!-- 
			<property name="hibernate.c3p0.min_size" value="5" />
			<property name="hibernate.c3p0.max_size" value="20" />
			<property name="hibernate.c3p0.timeout" value="500" />
			<property name="hibernate.c3p0.max_statements" value="50" />
			<property name="hibernate.c3p0.idle_test_period" value="2000" />
			 -->

		</properties>
		
	</persistence-unit>
	
</persistence>